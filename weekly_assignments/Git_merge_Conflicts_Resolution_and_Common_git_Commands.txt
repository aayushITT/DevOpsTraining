Git Merge Conflicts Resolution and Common Git Commands 

1. Merge Conflicts Resolution in Git 

A merge conflict occurs when Git is unable to automatically merge changes from two branches due to conflicting changes made to the same part of a file. This typically happens when two developers modify the same lines of a file in different ways or delete a file that another developer has modified. 

Here’s how to resolve merge conflicts: 

 

Steps to Resolve Merge Conflicts: 

Step 1: Identify the Merge Conflict 

When you try to merge branches (for example, using git merge), and there’s a conflict, Git will notify you with a message that a conflict exists. 

git merge <branch_name> 
 

Git will indicate the conflicting files with a status like: 

CONFLICT (content): Merge conflict in <file_name> 
Automatic merge failed; fix conflicts and then commit the result. 
 

Step 2: Open and Examine Conflicting Files 

Open the conflicting files in your preferred code editor (e.g., VS Code). 

Git will mark the conflicting sections of the files with conflict markers: 

<<<<<<< HEAD 
<Your changes> 
======= 
<Changes from the branch you're merging> 
>>>>>>> <branch_name> 
 

HEAD represents the changes in your current branch. 

The part after ======= represents the changes in the branch you are merging. 

Step 3: Resolve the Conflict 

Decide which changes to keep or merge both changes manually. 

After deciding, remove the conflict markers (<<<<<<<, =======, and >>>>>>>). 

Step 4: Stage the Resolved File 

Once you’ve resolved the conflict, stage the file for commit:  

git add <file_name> 
 

Step 5: Commit the Merge 

Commit the merge resolution: 

git commit 
 

Git will create a merge commit with the message “Merge branch ‘<branch_name>’” by default, but you can edit the message if you wish. 

Step 6: Push the Changes (if needed) 

After resolving the conflicts and committing the changes, push the resolved changes to the remote repository:  

git push origin <branch_name> 
 

 

2. Common Git Commands 

Here’s a list of essential Git commands that are frequently used for managing version control in a project. 

2.1. Configuration Commands 

Set your user name and email for Git: 

git config --global user.name "Your Name" 
git config --global user.email "youremail@example.com" 
 

Check your Git configuration: 

git config --list 
 

2.2. Repository Management Commands 

Initialize a new Git repository: 

git init 
 

Clone a repository:    git clone <repository_url> 
 

2.3. Working with Files and Staging 

Check the status of files (whether they are modified or staged): 

git status 
 

Add a file to the staging area: 

git add <file_name> 
 

Add all files to the staging area: 

git add . 
 

Unstage a file from the staging area: 

git reset <file_name> 
 

2.4. Committing Changes 

Commit staged changes with a message: 

git commit -m "Your commit message" 
 

Commit all changes, including untracked files: 

git commit -am "Your commit message" 
 

2.5. Branching Commands 

Create a new branch: 

git branch <branch_name> 
 

Switch to another branch: 

git checkout <branch_name> 
 

Create and switch to a new branch: 

git checkout -b <branch_name> 
 

List all branches: 

git branch 
 

Delete a branch (locally): 

git branch -d <branch_name> 
 

2.6. Merging and Resolving Conflicts 

Merge another branch into your current branch: 

git merge <branch_name> 
 

Resolve conflicts (as explained earlier). 

2.7. Remote Repository Commands 

Add a remote repository: 

git remote add origin <repository_url> 

View remotes associated with the repository: 

git remote -v 
 

Push changes to the remote repository: 

git push origin <branch_name> 
 

Pull changes from the remote repository: 

git pull origin <branch_name> 
 

Fetch changes from the remote repository without merging: 

git fetch 
 

2.8. Viewing History and Logs 

Show commit history for the repository: 

git log 
 

Show commit history in a graph format: 

git log --graph --oneline --decorate --all 
 

Show the differences between the working directory and the staging area: 

git diff 
 

Show the differences between the staging area and the last commit: 

git diff --cached 
 

 

Conclusion 

Git merge conflicts are a common challenge during collaborative development,  but resolving them is straightforward if handled systematically. Understanding the key Git commands is also essential for efficient version control and collaboration within a team.  